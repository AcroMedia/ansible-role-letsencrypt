---
- name: Check if OS is supported
  assert:
    msg: msg="Server must be Ubuntu 16+ or RedHat/CentOS 6+"
    that: (ansible_distribution == 'Ubuntu' and  ansible_distribution_major_version >= "16")
      or (ansible_os_family == 'RedHat' and ansible_distribution_major_version >= '6')

- include_vars: "vars/{{ ansible_os_family }}.yml"

- name: Run {{ letsencrypt_webserver }}.yml playbook
  include: "{{ letsencrypt_webserver }}.yml"

- name: Create the acme-challenge dir
  file:
    path: "{{ letsencrypt_webroot }}/.well-known/acme-challenge"
    state: directory
  notify: "restart {{ letsencrypt_webserver }}"

- name: Be able to ping the challenge dir
  lineinfile:
    dest: "{{ letsencrypt_webroot }}/.well-known/acme-challenge/ping"
    state: present
    line: pong
    create: yes

- block:
    - name: Install snap
      apt:
        name:
          - snap
    - name: Create symlink to old certbot path for AAW's benefit
      file:
        state: link
        src: /usr/bin/certbot
        dest: /usr/local/bin/certbot-auto
  when: ansible_distribution == 'Ubuntu'
    and letsencrypt_install_certbot_from_ppa == true

- block:
    - name: Remove obsolete PPA version of letsencrypt
      apt:
        name:
          - letsencrypt
          - certbot
        state: absent
        purge: false  # Do NOT remove config files
        update_cache: true

        #- name: Remove obsolete Certbot PPA repo
        # apt_repository:
        #  repo: ppa:certbot/certbot
        # state: absent
        #update_cache: true

    - name: Install LetsEncrypt
      apt:
        name: letsencrypt
        state: present
        update_cache: true

    - name: Remove certbot-auto when it's a symlink
      shell: if [ -h /usr/local/bin/certbot-auto ] ; then rm -v /usr/local/bin/certbot-auto; else true; fi
      register: rm_certbot_link_result
      changed_when: "rm_certbot_link_result is defined
      and rm_certbot_link_result.stdout is defined
      and 'removed' in rm_certbot_link_result.stdout"

    - name: Purge obsolete certbot virtual environment
      shell: rm -rf /opt/eff.org
      when: rm_certbot_link_result is defined
        and rm_certbot_link_result.changed

  when: ansible_distribution == 'Ubuntu'
    and letsencrypt_install_certbot_from_ppa == false

- name: Check if certbot-auto exists
  stat: path=/usr/bin/certbot
  register: certbot_auto_file

- name: Download certbot-auto if it doesn't exist
  snap:
    name:
      - core
      - certbot
  notify: "restart {{ letsencrypt_webserver }}"
  when: certbot_auto_file.stat.exists == false

- name: Prepare the certbot command
  shell: ln -s /snap/bin/certbot /usr/bin/certbot
  when: certbot_auto_file.stat.exists == false

- name: Add specified repository into sources list
  apt_repository:
    repo: ppa:certbot/certbot
    state: present
    update_cache: true
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version < '20'

- name: Install certbot nginx for u16/u18
  apt:
    name: python-certbot-nginx
    state: present
    update_cache: true
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version < '20'

- name: Install certbot nginx
  apt:
    name: python3-certbot-nginx
    state: present
    update_cache: true
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '20'


- name: Create a destination for dhparams
  file:
    path: "/usr/local/ssl/private"
    state: directory
    mode: 0700

- name: Create dhparams.pem (can take several minutes)
  shell: umask 077 && openssl dhparam -out /usr/local/ssl/private/dhparams.pem 2048
  args:
    creates: /usr/local/ssl/private/dhparams.pem

- name: Stat the default site SSL cert
  stat:
    path: "/etc/letsencrypt/live/{{ default_site_fqdn }}"
  register: default_cert_result
- debug:
    var: default_cert_result
- name: Compose the certbot command string for the default site cert
  set_fact:
    certbot_command_string: >-
      certbot --nginx --email {{ letsencrypt_expiry_email }} --agree-tos --non-interactive -d {{ default_site_fqdn }}

- name: Create a cert for the default site (can take some time)
  shell: >
    {{ certbot_command_string }}
  register: certbot_result
  when: default_cert_result is defined
    and (not default_cert_result.exists)
  environment:
    DEBIAN_FRONTEND: noninteractive

- name: Re-stat default site SSL cert
  stat:
    path: "/etc/letsencrypt/live/{{ default_site_fqdn }}"
  register: default_cert_retest

- name: Automatically update certbot-auto once a month with cron on Ubuntu
  cron:
    name: "Update certbot-auto once a month"
    minute: "0"
    hour: "0"
    day: "1"
    job: >
      /etc/crontab/certbot renew
  tags:
    - letsencrypt_cron
  when: ansible_distribution == 'Ubuntu'
    and letsencrypt_install_certbot_from_ppa == false


- name: Run {{ letsencrypt_webserver }}_default.ssl.yml.playbook
  include: "{{ letsencrypt_webserver }}_default_ssl.yml"
  when: not letsencrypt_molecule_mock_mode
